//package ThingForMarchal;
//
//import java.io.File;
//import java.io.FileWriter;
//import java.io.IOException;
//import java.util.ArrayList;
//import java.util.List;
//import java.util.Map;
//import java.util.stream.Collectors;
//import java.util.HashMap;
//
//import org.opencv.core.*;
//import org.opencv.core.Core.*;
//import org.opencv.features2d.FeatureDetector;
//import org.opencv.imgcodecs.Imgcodecs;
//import org.opencv.imgproc.*;
//import org.opencv.objdetect.*;
//
///**
// * Pipeline class.
// *
// * <p>An OpenCV pipeline generated by GRIP.
// *
// * @author GRIP
// */
//public class Pipeline {
//
//    //Outputs
//    private Mat cvCvtcolorOutput = new Mat();
//    private Mat cvErode0Output = new Mat();
//    private Mat hsvThresholdOutput = new Mat();
//    private Mat cvErode1Output = new Mat();
//
//    static {
//        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
//    }
//
//    /**
//     * This is the primary method that runs the entire pipeline and updates the outputs.
//     */
//    public void process(Mat source0) {
//        // Step CV_cvtColor0:
//        Mat cvCvtcolorSrc = source0;
//        int cvCvtcolorCode = Imgproc.COLOR_YUV2BGR;
//        cvCvtcolor(cvCvtcolorSrc, cvCvtcolorCode, cvCvtcolorOutput);
//
//        // Step CV_erode0:
//        Mat cvErode0Src = cvCvtcolorOutput;
//        Mat cvErode0Kernel = new Mat();
//        Point cvErode0Anchor = new Point(-1, -1);
//        double cvErode0Iterations = 1.0;
//        int cvErode0Bordertype = Core.BORDER_CONSTANT;
//        Scalar cvErode0Bordervalue = new Scalar(-1);
//        cvErode(cvErode0Src, cvErode0Kernel, cvErode0Anchor, cvErode0Iterations, cvErode0Bordertype, cvErode0Bordervalue, cvErode0Output);
//
//        // Step HSV_Threshold0:
//        Mat hsvThresholdInput = cvErode0Output;
//        double[] hsvThresholdHue = {80.93525179856115, 180.0};
//        double[] hsvThresholdSaturation = {0.0, 255.0};
//        double[] hsvThresholdValue = {0.0, 255.0};
//        hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);
//
//        // Step CV_erode1:
//        Mat cvErode1Src = hsvThresholdOutput;
//        Mat cvErode1Kernel = new Mat();
//        Point cvErode1Anchor = new Point(-1, -1);
//        double cvErode1Iterations = 1.0;
//        int cvErode1Bordertype = Core.BORDER_CONSTANT;
//        Scalar cvErode1Bordervalue = new Scalar(-1);
//        cvErode(cvErode1Src, cvErode1Kernel, cvErode1Anchor, cvErode1Iterations, cvErode1Bordertype, cvErode1Bordervalue, cvErode1Output);
//
//    }
//
//    /**
//     * This method is a generated getter for the output of a CV_cvtColor.
//     * @return Mat output from CV_cvtColor.
//     */
//    public Mat cvCvtcolorOutput() {
//        return cvCvtcolorOutput;
//    }
//
//    /**
//     * This method is a generated getter for the output of a CV_erode.
//     * @return Mat output from CV_erode.
//     */
//    public Mat cvErode0Output() {
//        return cvErode0Output;
//    }
//
//    /**
//     * This method is a generated getter for the output of a HSV_Threshold.
//     * @return Mat output from HSV_Threshold.
//     */
//    public Mat hsvThresholdOutput() {
//        return hsvThresholdOutput;
//    }
//
//    /**
//     * This method is a generated getter for the output of a CV_erode.
//     * @return Mat output from CV_erode.
//     */
//    public Mat cvErode1Output() {
//        return cvErode1Output;
//    }
//
//
//    /**
//     * Converts an image from one color space to another.
//     * @param src Image to convert.
//     * @param code conversion code.
//     * @param dst converted Image.
//     */
//    private void cvCvtcolor(Mat src, int code, Mat dst) {
//        Imgproc.cvtColor(src, dst, code);
//    }
//
//    /**
//     * Segment an image based on hue, saturation, and value ranges.
//     *
//     * @param input The image on which to perform the HSL threshold.
//     * @param hue The min and max hue
//     * @param sat The min and max saturation
//     * @param val The min and max value
//     * @param output The image in which to store the output.
//     */
//    private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
//                              Mat out) {
//        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
//        Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
//                new Scalar(hue[1], sat[1], val[1]), out);
//    }
//
///**
// * Expands area of lower value in an image.
// * @param src the Image to erode.
// * @param kernel the kernel for erosion.
// * @param anchor the center of the kernel.
// * @param iterations the number of times to perform the erosion.
// * @param borderType pixel extrapolation method.
// * @param borderValue value to be used for a constant border.
